version: '3.8'

services:

  minio:
    restart: always
    image: quay.io/minio/minio
    container_name: mlflow_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    expose:
      - "9000"
      - "9001"
    networks:
      - backend
    command: server /example_data --console-address ':9001' --address ':9000'
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - minio_data:/example_data

  db:
    restart: always
    image: mysql/mysql-server
    container_name: mlflow_db
    ports:
      - "3306:3306"
    expose:
      - "3306"
    networks:
      - backend
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - dbdata:/var/lib/mysql

  web:
    restart: always
    build:
      context: build
      dockerfile: mlflow.Dockerfile
    image: mlflow_server
    container_name: mlflow_server
    expose:
      - "5000"
    networks:
      - frontend
      - backend
    depends_on:
      - minio
      - db
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: >
      mlflow server
      --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE} 
      --default-artifact-root s3://mlflow/
      --artifacts-destination s3://mlflow/
      --gunicorn-opts "--log-level debug"
      --host 0.0.0.0

  nginx:
    restart: always
    image: nginx:alpine
    container_name: mlflow_nginx
    ports:
      - "80:80"
    networks:
      - frontend
    depends_on:
      - web
    volumes:
      - ./config/mlflow.conf:/etc/nginx/conf.d/default.conf

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  dbdata:
  minio_data: